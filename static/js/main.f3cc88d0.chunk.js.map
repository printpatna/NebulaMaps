{"version":3,"sources":["models/posts.js","models/index.js","components/ImageCard.js","screens/SinglePostScreen.js","screens/MapScreen.js","screens/ErrorScreen.js","App.js","serviceWorker.js","index.js"],"names":["get","_callee","id","regenerator_default","a","wrap","_context","prev","next","fetch","concat","abrupt","sent","stop","getAll","_callee2","_context2","getChannelPost","_callee3","channelId","postId","result","_context3","firebase","firestore","collection","doc","data","initializeApp","projectId","CallToAction","props","_props$location$coord","location","coords","latitude","longitude","MapsURL","DirectionURL","react_default","createElement","style","styles","imagecardCTAGallary","imagecardCTA","href","type","textBlack","state","this","posts","then","_this2","setState","Object","objectSpread","json","console","log","_this$state","image","highlight","date","timestamp","toDate","container","imageCard","toDateString","toLocaleTimeString","src","uri","width","height","margin","alt","caption","React","Component","display","justifyContent","flexDirection","backgroundColor","borderRadius","alignItems","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","alignSelf","ImageCard_default","match","params","post_id","undefined","channel_id","MapScreen","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mapDOM","createRef","window","initMap","bind","google","MarkerClusterer","map","maps","Map","document","getElementById","zoom","center","lat","lng","markerCluster","imagePath","_i","_Object$entries","entries","length","_ref3","post","slicedToArray","contentString","infoWindow","InfoWindow","content","marker","Marker","position","label","addListener","open","addMarker","fitMapToMarkers","ref","ErrorScreen","App","react_router_dom","basename","process","react_router","path","exact","component","SinglePostScreen","Boolean","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3cc88d0.chunk.js","sourcesContent":["import { firebase } from './';\n\nasync function get(id) {\n  if (id != null) {\n    return await fetch(`https://nebula-aluben.firebaseio.com/posts/${id}.json?print=pretty`);\n  }\n}\n\nasync function getAll() {\n  return await fetch(`https://nebula-aluben.firebaseio.com/posts.json?print=pretty`);\n}\n\nasync function getChannelPost(channelId, postId) {\n  const result = await firebase.firestore()\n    .collection(\"channels\").doc(channelId)\n    .collection(\"posts\").doc(postId)\n    .get();\n  return result.data();\n}\n\nexport {\n  get,\n  getAll,\n  getChannelPost,\n}","import * as posts from './posts';\nimport * as users from './users';\nimport firebase from 'firebase';\nimport '@firebase/firestore';\n\nconst firebaseConfig = {\n  projectId: 'nebula-aluben',\n}\n\nfirebase.initializeApp(firebaseConfig);\n\nexport {posts, users, firebase};","import React from 'react';\nimport { posts } from '../models';\nimport { isUndefined } from 'util';\n\nfunction CallToAction(props) {\n  if (\"location\" in props) {\n    const { latitude, longitude } = props.location.coords;\n    const MapsURL = \"https://www.google.com/maps/search/?api=1&query=\" + latitude + \",\" + longitude;\n    const DirectionURL = \"https://www.google.com/maps/dir/?api=1&dir_action=navigate&destination=\" + latitude + \",\" + longitude;\n    return (\n      <div\n        style={styles.imagecardCTAGallary}\n      >\n        <a\n          style={styles.imagecardCTA}\n          href={MapsURL}\n        >\n          <button\n            type=\"button\"\n          >Show in Maps</button>\n        </a>\n        <a\n          style={styles.imagecardCTA}\n          href={DirectionURL}\n        >\n          <button\n            type=\"button\"\n          >Show Directions</button>\n        </a>\n      </div>\n    )\n  } else {\n    return <p style={styles.textBlack}>Location Not Found!</p>\n  }\n}\n\nexport default class extends React.Component {\n  async componentDidMount() {\n    const { channelId, postId } = this.props;\n    if (!channelId) {\n      posts.get(postId)\n        .then(result => result.json())\n        .then(result => {\n          console.log(result);\n          this.setState({ ...result });\n        });\n    } else {\n      posts.getChannelPost(channelId, postId)\n        .then(result => {\n          this.setState({ ...result });\n        })\n    }\n  }\n\n  state = {};\n\n  render() {\n    if (\"image\" in this.state) {\n      const { image, highlight, timestamp } = this.state;\n      const date = timestamp.toDate();\n      return (\n        <div\n          style={styles.container}\n        >\n          <div\n            style={styles.imageCard}\n          >\n            <p style={styles.timestamp}>{`${date.toDateString()}, ${date.toLocaleTimeString()}`}</p>\n            <img\n              src={image.uri}\n              style={{ ...styles.image, width: 400, height: image.height / image.width * 400, margin: 10 }}\n              alt=\"\"\n            />\n            <p>{highlight.caption}</p>\n            <CallToAction {...this.state} />\n          </div>\n        </div>\n      );\n    } if (\"uri\" in this.state) {\n      return (\n        <div\n          style={styles.container}\n        >\n          <div\n            style={styles.imageCard}\n          >\n            <img\n              src={this.state.uri}\n              style={styles.image}\n              alt=\"\"\n            />\n            <CallToAction {...this.state} />\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div\n        style={styles.container}\n      >\n        <div\n          style={styles.imageCard}\n        >\n          <p>Image not Found!</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  imageCard: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    borderRadius: 2,\n    margin: 10,\n    alignItems: 'center',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.30,\n    shadowRadius: 4.65,\n    elevation: 8,\n    width: 425,\n  },\n  image: {\n    width: 400,\n    margin: 20,\n  },\n  imagecardCTAGallary: {\n    // margin: 10,\n    flexDirection: 'row',\n    // justifyContent: 'space-around', \n  },\n  imagecardCTA: {\n    margin: 10,\n  },\n  timestamp: {\n    alignSelf: 'flex-end',\n  }\n};","import React from 'react';\nimport { ImageCard } from '../components';\n\nexport default class extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          height: '100%',\n        }}\n      >\n        <ImageCard\n          postId={this.props.match.params.id ? this.props.match.params.id : this.props.match.params.post_id}\n          channelId={this.props.match.params.id ? undefined : this.props.match.params.channel_id}\n        />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport { posts } from '../models';\n\nexport default class MapScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapDOM = React.createRef();\n  }\n\n  componentDidMount() {\n    window.initMap = this.initMap.bind(this);\n  }\n\n  initMap() {\n    console.log(\"initMap called.\")\n    const google = window.google;\n    const MarkerClusterer = window.MarkerClusterer;\n    let map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 3,\n      center: { lat: -28.024, lng: 140.887 }\n    });\n\n    let markers = [];\n    // Add a marker clusterer to manage the markers.\n    const markerCluster = new MarkerClusterer(map, markers,\n      { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });\n\n\n    posts.getAll()\n      .then(result => result.json())\n      .then(result => {\n        for (let [, post] of Object.entries(result)) {\n          console.log(post);\n          if ('location' in post && 'coords' in post['location']) {\n            let contentString = '<img src=\"' + post.uri + '\" width=\"200\">';\n            let infoWindow = new google.maps.InfoWindow({\n              content: contentString\n            })\n            let marker = new google.maps.Marker({\n              position: {\n                lat: post['location']['coords']['latitude'],\n                lng: post['location']['coords']['longitude'],\n              },\n              label: \"loc\",\n            });\n            marker.addListener('click', function () {\n              infoWindow.open(map, marker);\n            });\n            markerCluster.addMarker(marker);\n            markerCluster.fitMapToMarkers();\n          }\n        }\n      })\n  }\n\n  render() {\n    return (\n      // <div>\n      //   <p>Map Screen</p>\n        <div\n          ref={this.mapDOM}\n          id=\"map\"\n          style={{\n            height: \"100%\",\n          }}\n        ></div>\n      // </div>\n    )\n  }\n}\n","import React from 'react';\n\nexport default function(props) {\n  return (\n    <p>\n      404- Not Found\n    </p>\n  )\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport {\n  MapScreen,\n  SinglePostScreen,\n  ErrorScreen,\n} from './screens';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      {/* <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n      </div> */}\n      <Switch>\n        <Route path=\"/\" exact component={MapScreen} />\n        <Route path=\"/post/:id\" exact component={SinglePostScreen} />\n        <Route path=\"/channels/:channel_id/posts/:post_id\" exact component={SinglePostScreen} />\n        <Route component={ErrorScreen} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
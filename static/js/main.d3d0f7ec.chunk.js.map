{"version":3,"sources":["models/posts.js","components/ImageCard.js","screens/SinglePostScreen.js","screens/MapScreen.js","screens/ErrorScreen.js","App.js","serviceWorker.js","index.js"],"names":["get","_callee","id","regenerator_default","a","wrap","_context","prev","next","fetch","concat","abrupt","sent","stop","getAll","_callee2","_context2","CallToAction","props","_props$location$coord","location","coords","latitude","longitude","MapsURL","DirectionURL","react_default","createElement","style","styles","imagecardCTAGallary","imagecardCTA","href","type","textBlack","state","posts","this","postId","then","result","json","console","log","_this2","setState","Object","objectSpread","imageCard","src","uri","image","alt","React","Component","display","flexDirection","backgroundColor","borderRadius","margin","alignItems","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","ImageCard_default","match","params","MapScreen","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mapDOM","createRef","window","initMap","bind","google","MarkerClusterer","map","maps","Map","document","getElementById","zoom","center","lat","lng","markerCluster","imagePath","_i","_Object$entries","entries","length","_ref3","post","slicedToArray","contentString","infoWindow","InfoWindow","content","marker","Marker","position","label","addListener","open","addMarker","fitMapToMarkers","ref","ErrorScreen","App","react_router_dom","react_router","path","exact","component","SinglePostScreen","Boolean","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3d0f7ec.chunk.js","sourcesContent":["async function get(id) {\r\n  if (id != null) {\r\n    return await fetch(`https://nebula-aluben.firebaseio.com/posts/${id}.json?print=pretty`);\r\n  }\r\n}\r\n\r\nasync function getAll() {\r\n  return await fetch(`https://nebula-aluben.firebaseio.com/posts.json?print=pretty`);\r\n}\r\n\r\nexport {\r\n  get,\r\n  getAll,\r\n}","import React from 'react';\r\nimport { posts } from '../models';\r\n\r\nfunction CallToAction(props) {\r\n  if (\"location\" in props) {\r\n    const { latitude, longitude } = props.location.coords;\r\n    const MapsURL = \"https://www.google.com/maps/search/?api=1&query=\" + latitude + \",\" + longitude;\r\n    const DirectionURL = \"https://www.google.com/maps/dir/?api=1&dir_action=navigate&destination=\" + latitude + \",\" + longitude;\r\n    return (\r\n      <div\r\n        style={styles.imagecardCTAGallary}\r\n      >\r\n        <a\r\n          style={styles.imagecardCTA}\r\n          href={MapsURL}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n          >Show in Maps</button>\r\n        </a>\r\n        <a\r\n          style={styles.imagecardCTA}\r\n          href={DirectionURL}\r\n        >\r\n          <button\r\n            type=\"button\"\r\n          >Show Directions</button>\r\n        </a>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <p style={styles.textBlack}>Location Not Found!</p>\r\n  }\r\n}\r\n\r\nexport default class extends React.Component {\r\n  async componentDidMount() {\r\n    posts.get(this.props.postId)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        console.log(result);\r\n        this.setState({ ...result });\r\n      });\r\n  }\r\n\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={styles.imageCard}\r\n      >\r\n        <img\r\n          src={this.state.uri}\r\n          // style={{ width: 400, height: 400, margin: 10 }}\r\n          style={styles.image}\r\n          alt=\"\"\r\n        />\r\n        <CallToAction {...this.state} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  imageCard: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    backgroundColor: '#fff',\r\n    borderRadius: 2,\r\n    margin: 10,\r\n    alignItems: 'center',\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.30,\r\n    shadowRadius: 4.65,\r\n    elevation: 8,\r\n  },\r\n  image: {\r\n    width: 400,\r\n    margin: 20,\r\n  },\r\n  imagecardCTAGallary: {\r\n    // margin: 10,\r\n    flexDirection: 'row',\r\n    // justifyContent: 'space-around', \r\n  },\r\n  imagecardCTA: {\r\n    margin: 10,\r\n  },\r\n};","import React from 'react';\r\nimport { ImageCard } from '../components';\r\n\r\nexport default class extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          height: '100%',\r\n        }}\r\n      >\r\n        {/* <p>Single Post Screen post id {this.props.match.params.id}</p> */}\r\n        <ImageCard\r\n          postId={this.props.match.params.id}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { posts } from '../models';\r\n\r\nexport default class MapScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mapDOM = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.initMap = this.initMap.bind(this);\r\n  }\r\n\r\n  initMap() {\r\n    console.log(\"initMap called.\")\r\n    const google = window.google;\r\n    const MarkerClusterer = window.MarkerClusterer;\r\n    let map = new google.maps.Map(document.getElementById('map'), {\r\n      zoom: 3,\r\n      center: { lat: -28.024, lng: 140.887 }\r\n    });\r\n\r\n    let markers = [];\r\n    // Add a marker clusterer to manage the markers.\r\n    const markerCluster = new MarkerClusterer(map, markers,\r\n      { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });\r\n\r\n\r\n    posts.getAll()\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        for (let [, post] of Object.entries(result)) {\r\n          console.log(post);\r\n          if ('location' in post && 'coords' in post['location']) {\r\n            let contentString = '<img src=\"' + post.uri + '\" width=\"200\">';\r\n            let infoWindow = new google.maps.InfoWindow({\r\n              content: contentString\r\n            })\r\n            let marker = new google.maps.Marker({\r\n              position: {\r\n                lat: post['location']['coords']['latitude'],\r\n                lng: post['location']['coords']['longitude'],\r\n              },\r\n              label: \"loc\",\r\n            });\r\n            marker.addListener('click', function () {\r\n              infoWindow.open(map, marker);\r\n            });\r\n            markerCluster.addMarker(marker);\r\n            markerCluster.fitMapToMarkers();\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <div>\r\n      //   <p>Map Screen</p>\r\n        <div\r\n          ref={this.mapDOM}\r\n          id=\"map\"\r\n          style={{\r\n            height: \"100%\",\r\n          }}\r\n        ></div>\r\n      // </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function(props) {\r\n  return (\r\n    <p>\r\n      404- Not Found\r\n    </p>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport {\r\n  MapScreen,\r\n  SinglePostScreen,\r\n  ErrorScreen,\r\n} from './screens';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      {/* <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        </header>\r\n      </div> */}\r\n      <Switch>\r\n        <Route path=\"/\" exact component={MapScreen} />\r\n        <Route path=\"/post/:id\" exact component={SinglePostScreen} />\r\n        <Route component={ErrorScreen} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}